{"ast":null,"code":"var _s = $RefreshSig$();\nimport \"./App.css\";\nimport { useState, useEffect, CSSProperties } from \"react\";\nimport Pagination from \"@mui/material/Pagination\";\nimport Stack from \"@mui/material/Stack\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let [loading, setLoading] = useState(true);\n  let [color, setColor] = useState(\"#ffffff\");\n  const [apiResponse, setApiResponse] = useState(null);\n  const [page, setPage] = useState(1);\n  const [currentPageData, setCurrentPageData] = useState(null);\n  const [totalPages, setTotalPages] = useState(1);\n  async function getData() {\n    const url = \"https://raw.githubusercontent.com/saaslabsco/frontend-assignment/refs/heads/master/frontend-assignment.json\";\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      console.log(json);\n      setApiResponse(json);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n  useEffect(() => {\n    getData();\n  }, []);\n  useEffect(() => {\n    const data = apiResponse && apiResponse.slice((page - 1) * 5, page * 5);\n    setCurrentPageData(data);\n    const pagecount = Math.ceil(apiResponse && apiResponse.length / 5);\n    setTotalPages(pagecount);\n  }, [apiResponse, page]);\n  const handleChange = (event, page) => {\n    setPage(page);\n  };\n  const override = {\n    display: \"block\",\n    margin: \"0 auto\",\n    borderColor: \"red\"\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading && /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false);\n}\n_s(App, \"twEfgwKwe0sWDAlAlHX0BgRc3wY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","CSSProperties","Pagination","Stack","ClipLoader","Fragment","_Fragment","jsxDEV","_jsxDEV","App","_s","loading","setLoading","color","setColor","apiResponse","setApiResponse","page","setPage","currentPageData","setCurrentPageData","totalPages","setTotalPages","getData","url","response","fetch","ok","Error","status","json","console","log","error","message","data","slice","pagecount","Math","ceil","length","handleChange","event","override","display","margin","borderColor","children","_c","$RefreshReg$"],"sources":["/Users/harsh/Desktop/frontend-assignment/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport { useState, useEffect, CSSProperties } from \"react\";\nimport Pagination from \"@mui/material/Pagination\";\nimport Stack from \"@mui/material/Stack\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nfunction App() {\n  let [loading, setLoading] = useState(true);\n  let [color, setColor] = useState(\"#ffffff\");\n  const [apiResponse, setApiResponse] = useState(null);\n  const [page, setPage] = useState(1);\n  const [currentPageData, setCurrentPageData] = useState(null);\n  const [totalPages, setTotalPages] = useState(1);\n\n  async function getData() {\n    const url =\n      \"https://raw.githubusercontent.com/saaslabsco/frontend-assignment/refs/heads/master/frontend-assignment.json\";\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Response status: ${response.status}`);\n      }\n\n      const json = await response.json();\n      console.log(json);\n      setApiResponse(json);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  useEffect(() => {\n    const data = apiResponse && apiResponse.slice((page - 1) * 5, page * 5);\n    setCurrentPageData(data);\n    const pagecount = Math.ceil(apiResponse && apiResponse.length / 5);\n    setTotalPages(pagecount);\n  }, [apiResponse, page]);\n\n  const handleChange = (event, page) => {\n    setPage(page);\n  };\n\n  const override: CSSProperties = {\n    display: \"block\",\n    margin: \"0 auto\",\n    borderColor: \"red\",\n  };\n\n  return (\n    <>\n      {loading && <></>}\n\n\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAW;AAClB,SAASA,QAAQ,EAAEC,SAAS,EAAEC,aAAa,QAAQ,OAAO;AAC1D,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,UAAU,MAAM,2BAA2B;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,IAAI,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC1C,IAAI,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,SAAS,CAAC;EAC3C,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACkB,IAAI,EAAEC,OAAO,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACoB,eAAe,EAAEC,kBAAkB,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACsB,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC;EAE/C,eAAewB,OAAOA,CAAA,EAAG;IACvB,MAAMC,GAAG,GACP,6GAA6G;IAC/G,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,oBAAoBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MACxD;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjBd,cAAc,CAACc,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC;IAC9B;EACF;EAEAlC,SAAS,CAAC,MAAM;IACduB,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAENvB,SAAS,CAAC,MAAM;IACd,MAAMmC,IAAI,GAAGpB,WAAW,IAAIA,WAAW,CAACqB,KAAK,CAAC,CAACnB,IAAI,GAAG,CAAC,IAAI,CAAC,EAAEA,IAAI,GAAG,CAAC,CAAC;IACvEG,kBAAkB,CAACe,IAAI,CAAC;IACxB,MAAME,SAAS,GAAGC,IAAI,CAACC,IAAI,CAACxB,WAAW,IAAIA,WAAW,CAACyB,MAAM,GAAG,CAAC,CAAC;IAClElB,aAAa,CAACe,SAAS,CAAC;EAC1B,CAAC,EAAE,CAACtB,WAAW,EAAEE,IAAI,CAAC,CAAC;EAEvB,MAAMwB,YAAY,GAAGA,CAACC,KAAK,EAAEzB,IAAI,KAAK;IACpCC,OAAO,CAACD,IAAI,CAAC;EACf,CAAC;EAED,MAAM0B,QAAuB,GAAG;IAC9BC,OAAO,EAAE,OAAO;IAChBC,MAAM,EAAE,QAAQ;IAChBC,WAAW,EAAE;EACf,CAAC;EAED,oBACEtC,OAAA,CAAAF,SAAA;IAAAyC,QAAA,EACGpC,OAAO,iBAAIH,OAAA,CAAAF,SAAA,mBAAI;EAAC,gBAGjB,CAAC;AAEP;AAACI,EAAA,CArDQD,GAAG;AAAAuC,EAAA,GAAHvC,GAAG;AAuDZ,eAAeA,GAAG;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}